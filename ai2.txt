from collections import deque

class Graph:
    def __init__(self, adjacency_list):
        self.adjacency_list = adjacency_list

    def get_neighbors(self, node):
        return self.adjacency_list[node]

    def h(self, node):
        H = {
            'A': 1,
            'B': 1,
            'C': 1,
            'D': 1
        }
        return H[node]

    def a_star_algorithm(self, start_node, stop_node):
        open_list = set([start_node])
        closed_list = set([])
        g = {start_node: 0}
        parents = {start_node: start_node}

        while open_list:
            current_node = None
            for node in open_list:
                if current_node is None or g[node] + self.h(node) < g[current_node] + self.h(current_node):
                    current_node = node

            if current_node is None:
                raise ValueError("Path does not exist!")

            if current_node == stop_node:
                reconst_path = []
                while parents[current_node] != current_node:
                    reconst_path.append(current_node)
                    current_node = parents[current_node]
                reconst_path.append(start_node)
                reconst_path.reverse()
                return reconst_path

            open_list.remove(current_node)
            closed_list.add(current_node)

            for (neighbor, weight) in self.get_neighbors(current_node):
                if neighbor in closed_list:
                    continue

                if neighbor not in open_list or g[neighbor] > g[current_node] + weight:
                    g[neighbor] = g[current_node] + weight
                    parents[neighbor] = current_node
                    open_list.add(neighbor)

        raise ValueError("Path does not exist!")

adjacency_list = {
    'A': [('B', 1), ('C', 3), ('D', 7)],
    'B': [('D', 5)],
    'C': [('D', 12)]
}

graph1 = Graph(adjacency_list)
try:
    path = graph1.a_star_algorithm('A', 'D')
    print('Path found:', path)
except ValueError as e:
    print(e)
